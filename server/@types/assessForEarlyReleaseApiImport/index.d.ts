/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/queue-admin/retry-dlq/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** @description
     *
     *     Requires one of the following roles:
     *     * ROLE_QUEUE_ADMIN */
    put: operations['retryDlq']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/retry-all-dlqs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['retryAllDlqs']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/purge-queue/{queueName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** @description
     *
     *     Requires one of the following roles:
     *     * ROLE_QUEUE_ADMIN */
    put: operations['purgeQueue']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/opt-out': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Opts an offender out of being assessed for early release.
     * @description Opts an offender out of being assessed for early release.
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    put: operations['optOut']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/eligibility-and-suitability-check': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Sets the state of a current eligbility/suitability check
     * @description Returns details of a specific suitability for a prisoner's initial checks
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    put: operations['answerCheck']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/standard-address-check-request': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Adds a standard address check request for an offender.
     * @description Adds a standard address check request for an offender's current assessment.
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    post: operations['addStandardAddressCheckRequest']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/cas-check-request': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Adds a CAS check request for an offender.
     * @description Adds a CAS check request for an offender's current assessment.
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    post: operations['addCasCheckRequest']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description
     *
     *     Requires one of the following roles:
     *     * ROLE_QUEUE_ADMIN */
    get: operations['getDlqMessages']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prison/{prisonCode}/case-admin/caseload': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the caseload for a case admin within a prison
     * @description Returns a list of offenders that require eligibility and suitability checks to be performed
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getCaseAdminCaseload']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the current assessment for a prisoner
     * @description Returns details of the current assessment for a prisoner
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getCurrentAssessment']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/suitability/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns a specific suitability check for a prisoner's current assessment
     * @description Returns details of a specific suitability for a prisoner's initial checks
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getSuitabilityCheck']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/eligibility/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns a specific eligibility check for a prisoner's current assessment
     * @description Returns details of a specific eligibility for a prisoner's initial checks
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getEligibilityCriterion']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/eligibility-and-suitability': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the initial checks for a prisoner's current assessment
     * @description Returns details of the current state of a prisoner's initial checks
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getCaseView']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/addresses': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns addresses that match the postcode parameter
     * @description Returns addresses that match the postcode parameter
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getAddressesForPostcode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/address/uprn/{uprn}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets an address by it's UPRN
     * @description Gets an address by it's UPRN
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getAddressForUprn']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    /** @description Request for opting an offender out of assess for early release */
    OptOutRequest: {
      /**
       * @description The reason the offender is opting out
       * @example DOES_NOT_WANT_TO_BE_TAGGED
       * @enum {string}
       */
      reasonType: 'NOWHERE_TO_STAY' | 'DOES_NOT_WANT_TO_BE_TAGGED' | 'NO_REASON_GIVEN' | 'OTHER'
      /**
       * @description The reason the offender is opting out if reasonType is other
       * @example Reason for the offending opting out
       */
      otherDescription?: string
    }
    /** @description Response object which describes an offender */
    OffenderSummary: {
      /**
       * @description The offender's prisoner number
       * @example A1234AA
       */
      prisonNumber: string
      /**
       * Format: int64
       * @description The offender's booking id
       * @example 773722
       */
      bookingId: number
      /**
       * @description The offender's first name
       * @example Bob
       */
      forename?: string
      /**
       * @description The offender's surname
       * @example Smith
       */
      surname?: string
      /**
       * Format: date
       * @description The offender's home detention curfew eligibility date
       */
      hdced: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    /** @description The answers to the question for a specific criterion */
    CriterionCheck: {
      /**
       * @description The type of criteria
       * @example eligibility
       * @enum {string}
       */
      type: 'eligibility' | 'suitability'
      /**
       * @description A unique code for the check
       * @example code-1
       */
      code: string
      /** @description A unique code for the check */
      answers: {
        [key: string]: boolean
      }
    }
    /** @description Request for adding a standard address check request */
    AddStandardAddressCheckRequest: {
      /**
       * @description Any additional information added by the case admin
       * @example Additional information about this address...
       */
      caAdditionalInfo?: string
      /**
       * @description Any additional information added by the probation practitioner
       * @example Additional information about this address...
       */
      ppAdditionalInfo?: string
      /**
       * @description The offenders priority for this address
       * @example SECOND
       * @enum {string}
       */
      preferencePriority: 'FIRST' | 'SECOND' | 'THIRD' | 'FOURTH'
      /**
       * @description The UPRN of the address to check
       * @example 200010019924
       */
      addressUprn: string
    }
    /** @description Response object which describes an address */
    AddressSummary: {
      /**
       * @description The address's UPRN
       * @example 200010019924
       */
      uprn: string
      /**
       * @description The address's first line
       * @example 34 Maryport Street
       */
      firstLine?: string
      /**
       * @description The address's second line
       * @example Urchfont
       */
      secondLine?: string
      /**
       * @description The address's town
       * @example Chippenham
       */
      town: string
      /**
       * @description The address's county
       * @example Shropshire
       */
      county: string
      /**
       * @description The address's postcode
       * @example RG13HS
       */
      postcode: string
      /**
       * @description The address's country
       * @example Wales
       */
      country: string
      /**
       * Format: double
       * @description The address's x-coordinate
       */
      xCoordinate?: number
      /**
       * Format: double
       * @description The address's y-coordinate
       * @example 154111
       */
      yCoordinate?: number
      /**
       * Format: date
       * @description The date the address was last updated
       * @example 2021-05-23
       */
      addressLastUpdated: string
    }
    /** @description Response object which describes a standard address check request */
    StandardAddressCheckRequestSummary: {
      /**
       * @description Any additional information on the request added by the case administrator
       * @example Some additional info
       */
      caAdditionalInfo?: string
      /**
       * @description Any additional information on the request added by the probation practitioner
       * @example Some additional info
       */
      ppAdditionalInfo?: string
      /**
       * @description The date / time the check was requested on
       * @example 2021-07-05T10:35:17
       */
      dateRequested: string
      /**
       * @description The priority of the check request
       * @example SECOND
       * @enum {string}
       */
      preferencePriority: 'FIRST' | 'SECOND' | 'THIRD' | 'FOURTH'
      /**
       * @description The status of the check request
       * @example SUITABLE
       * @enum {string}
       */
      status: 'IN_PROGRESS' | 'UNSUITABLE' | 'SUITABLE'
      address: components['schemas']['AddressSummary']
    }
    /** @description Request for adding a CAS check request */
    AddCasCheckRequest: {
      /**
       * @description Any additional information added by the case admin
       * @example Additional information about this address...
       */
      caAdditionalInfo?: string
      /**
       * @description Any additional information added by the probation practitioner
       * @example Additional information about this address...
       */
      ppAdditionalInfo?: string
      /**
       * @description The offenders priority for this address
       * @example SECOND
       * @enum {string}
       */
      preferencePriority: 'FIRST' | 'SECOND' | 'THIRD' | 'FOURTH'
    }
    /** @description Response object which describes a CAS check request */
    CasCheckRequestSummary: {
      /**
       * @description Any additional information on the request added by the case administrator
       * @example Some additional info
       */
      caAdditionalInfo?: string
      /**
       * @description Any additional information on the request added by the probation practitioner
       * @example Some additional info
       */
      ppAdditionalInfo?: string
      /**
       * @description The date / time the check was requested on
       * @example 2021-07-05T10:35:17
       */
      dateRequested: string
      /**
       * @description The priority of the check request
       * @example SECOND
       * @enum {string}
       */
      preferencePriority: 'FIRST' | 'SECOND' | 'THIRD' | 'FOURTH'
      /**
       * @description The status of the check request
       * @example SUITABLE
       * @enum {string}
       */
      status: 'IN_PROGRESS' | 'UNSUITABLE' | 'SUITABLE'
      allocatedAddress?: components['schemas']['AddressSummary']
    }
    DlqMessage: {
      body: {
        [key: string]: Record<string, never>
      }
      messageId: string
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    /** @description Response object which describes an assessment */
    AssessmentSummary: {
      /**
       * @description The offender's first name
       * @example Bob
       */
      forename?: string
      /**
       * @description The offender's surname
       * @example Smith
       */
      surname?: string
      /**
       * Format: date
       * @description The offender's date of birth
       */
      dateOfBirth: string
      /**
       * @description The offender's prison number
       * @example A1234AA
       */
      prisonNumber: string
      /**
       * Format: date
       * @description The offender's home detention curfew eligibility date
       */
      hdced: string
      /**
       * Format: date
       * @description The offender's conditional release date
       */
      crd?: string
      /**
       * @description The name of the prison the offender is in
       * @example Foston Hall (HMP)
       */
      location: string
      /**
       * @description The assessment status
       * @example NOT_STARTED
       * @enum {string}
       */
      status:
        | 'NOT_STARTED'
        | 'ELIGIBILITY_AND_SUITABILITY_IN_PROGRESS'
        | 'ELIGIBLE_AND_SUITABLE'
        | 'AWAITING_ADDRESS_AND_RISK_CHECKS'
        | 'ADDRESS_AND_RISK_CHECKS_IN_PROGRESS'
        | 'AWAITING_PRE_DECISION_CHECKS'
        | 'AWAITING_DECISION'
        | 'APPROVED'
        | 'AWAITING_PRE_RELEASE_CHECKS'
        | 'PASSED_PRE_RELEASE_CHECKS'
        | 'ADDRESS_UNSUITABLE'
        | 'AWAITING_REFUSAL'
        | 'INELIGIBLE_OR_UNSUITABLE'
        | 'REFUSED'
        | 'TIMED_OUT'
        | 'POSTPONED'
        | 'OPTED_OUT'
        | 'RELEASED_ON_HDC'
      /**
       * @description The version of the policy that this assessment has been carried out under
       * @example 1.0
       */
      policyVersion: string
    }
    /** @description A question that is asked by the user */
    Question: {
      /**
       * @description The question that is posed to the user
       * @example a question...
       */
      text: string
      /**
       * @description The hint html associated with this question
       * @example <p>Some hint text</p>
       */
      hint?: string
      /**
       * @description The name that the data will be stored under for this check
       * @example question1
       */
      name?: string
      /**
       * @description The answer provided by the user for this question
       * @example true
       */
      answer?: boolean
    }
    /** @description The progress on a specific suitability criteria for a case */
    SuitabilityCriterionProgress: {
      /**
       * @description the unique code to identify this criterion
       * @example rosh-and-mappa
       */
      code: string
      /**
       * @description The name of the criterion that would appear in a task list
       * @example RoSH and MAPPA
       */
      taskName: string
      /**
       * @description Status of this criterion for a specific case
       * @example NOT_STARTED
       * @enum {string}
       */
      status: 'SUITABLE' | 'UNSUITABLE' | 'IN_PROGRESS' | 'NOT_STARTED'
      /** @description The questions that are associated with this criterion for this case */
      questions: components['schemas']['Question'][]
    }
    /** @description The details of a specific suitability criterion */
    SuitabilityCriterionView: {
      assessmentSummary: components['schemas']['AssessmentSummary']
      criterion: components['schemas']['SuitabilityCriterionProgress']
      nextCriterion?: components['schemas']['SuitabilityCriterionProgress']
    }
    /** @description The progress on a specific eligibility criterion for a case */
    EligibilityCriterionProgress: {
      /**
       * @description the unique code to identify this criterion
       * @example rotl-failure-to-return
       */
      code: string
      /**
       * @description The name of the criterion that would appear in a task list
       * @example ROTL failure to return
       */
      taskName: string
      /**
       * @description Status of this criterion for a specific case
       * @example NOT_STARTED
       * @enum {string}
       */
      status: 'ELIGIBLE' | 'INELIGIBLE' | 'IN_PROGRESS' | 'NOT_STARTED'
      /** @description The questions that are associated with this criterion for this case */
      questions: components['schemas']['Question'][]
    }
    /** @description The details of a specific eligibility criterion */
    EligibilityCriterionView: {
      assessmentSummary: components['schemas']['AssessmentSummary']
      criterion: components['schemas']['EligibilityCriterionProgress']
      nextCriterion?: components['schemas']['EligibilityCriterionProgress']
    }
    /** @description A view on the progress of suitability and eligibility criteria for a specific case */
    EligibilityAndSuitabilityCaseView: {
      assessmentSummary: components['schemas']['AssessmentSummary']
      /** @description all eligibility checks ELIGIBLE, or any eligibility check INELIGIBLE */
      complete: boolean
      /** @description eligibility status = ELIGIBLE and suitability status = SUITABLE */
      checksPassed: boolean
      /**
       * @description state of current eligibility checks
       * @enum {string}
       */
      eligibilityStatus: 'ELIGIBLE' | 'INELIGIBLE' | 'IN_PROGRESS' | 'NOT_STARTED'
      /** @description details of current eligibility checks */
      eligibility: components['schemas']['EligibilityCriterionProgress'][]
      /**
       * @description state of current suitability checks
       * @enum {string}
       */
      suitabilityStatus: 'SUITABLE' | 'UNSUITABLE' | 'IN_PROGRESS' | 'NOT_STARTED'
      /** @description details of current suitability checks */
      suitability: components['schemas']['SuitabilityCriterionProgress'][]
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  retryDlq: {
    parameters: {
      query?: never
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
    }
  }
  retryAllDlqs: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      query?: never
      header?: never
      path: {
        queueName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
    }
  }
  optOut: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OptOutRequest']
      }
    }
    responses: {
      /** @description The offender has been opted out of assess for early release. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderSummary'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  answerCheck: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CriterionCheck']
      }
    }
    responses: {
      /** @description Returns no content if check has been recorded correctly */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addStandardAddressCheckRequest: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AddStandardAddressCheckRequest']
      }
    }
    responses: {
      /** @description The standard address check request has been added to the offender's current assessment. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['StandardAddressCheckRequestSummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addCasCheckRequest: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AddCasCheckRequest']
      }
    }
    responses: {
      /** @description The CAS check request has been added to the current assessment for the offender. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CasCheckRequestSummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
    }
  }
  getCaseAdminCaseload: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a list of offenders that require eligibility and suitability checks to be performed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderSummary'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCurrentAssessment: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns the current assessment for the prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AssessmentSummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSuitabilityCheck: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns details of a specific suitability criteria in the current assessment for the prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SuitabilityCriterionView']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getEligibilityCriterion: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns details of a specific eligibility criteria in the current assessment for the prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EligibilityCriterionView']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCaseView: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns the current assessment for the prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EligibilityAndSuitabilityCaseView']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAddressesForPostcode: {
    parameters: {
      query: {
        postcode: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns addresses matching the supplied postcode */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AddressSummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAddressForUprn: {
    parameters: {
      query?: never
      header?: never
      path: {
        uprn: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns the address with the provided UPRN */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AddressSummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
