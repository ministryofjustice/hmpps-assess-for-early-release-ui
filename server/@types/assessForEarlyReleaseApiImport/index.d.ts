/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/queue-admin/retry-dlq/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** @description
     *
     *     Requires one of the following roles:
     *     * ROLE_QUEUE_ADMIN */
    put: operations['retryDlq']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/retry-all-dlqs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['retryAllDlqs']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/purge-queue/{queueName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** @description
     *
     *     Requires one of the following roles:
     *     * ROLE_QUEUE_ADMIN */
    put: operations['purgeQueue']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/vlo-and-pom-consultation': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates the vlo and pom consultation information for an assessment.
     * @description Updates the vlo and pom consultation information for an assessment
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    put: operations['updateVloAndPomConsultation']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/submit-for-pre-decision-checks': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Submits an offender's current assessment to the prison case admin for pre-decision checks
     * @description Submits an offender's current assessment to the prison case admin to perform pre-decision checks.
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    put: operations['submitForPreDecisionChecks']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/submit-for-address-checks': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Submits an offender's current assessment for address checks.
     * @description Submits an offender's current assessment so that address checks by the probation practitioner can begin.
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    put: operations['submitForAddressChecks']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/record-non-disclosable-information': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Records an offender's non disclosable information
     * @description Create or update an offender's non disclosable information
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    put: operations['recordNonDisclosableInformation']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/postpone': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Postpone case for early release.
     * @description Postpone offenders case for early release.
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    put: operations['postponeCase']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/opt-out': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Opts an offender out of being assessed for early release.
     * @description Opts an offender out of being assessed for early release.
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    put: operations['optOut']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/opt-in': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Allows an offender to opt back in to being assessed for early release.
     * @description Allows an offender to opt back in to being assessed for early release.
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    put: operations['optBackIn']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/eligibility-and-suitability-check': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Sets the state of a current eligbility/suitability check
     * @description Returns details of a specific suitability for a prisoner's initial checks
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    put: operations['answerCheck']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/address-request/{requestId}/case-admin-additional-information': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Adds case admin additional information to an address.
     * @description Adds case admin additional information to an address check request.
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    put: operations['updateCaseAdminAdditionalInformation']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/standard-address-check-request': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Adds a standard address check request for an offender.
     * @description Adds a standard address check request for an offender's current assessment.
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    post: operations['addStandardAddressCheckRequest']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/standard-address-check-request/{requestId}/resident': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Adds a resident to standard address check request for an assessment.
     * @description Adds a resident to a standard address check request for an offender's current assessment.
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    post: operations['addStandardAddressCheckRequestResident']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/cas-check-request': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Adds a CAS check request for an offender.
     * @description Adds a CAS check request for an offender's current assessment.
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    post: operations['addCasCheckRequest']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/address-request/{requestId}/residential-checks/answers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Saves answers for a residential checks task.
     * @description Save the answers for a residential checks task.
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    post: operations['saveResidentialChecksTaskAnswers']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/support/offender/{prisonNumber}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the offender for the give prison number
     * @description Returns the offender for the give prison number)
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getOffender']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/support/offender/{prisonNumber}/assessments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the assessments for the given prisoner
     * @description Returns the assessments for the given prisoner
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getAssessments']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/support/offender/search/{searchString}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the offenders details for the given search string
     * @description Returns the offenders details for the give search string (prison or crn number)
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['searchForOffender']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/support/offender/assessment/{assessmentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the assessment for a given assessment ID
     * @description Returns the assessment for a given assessment ID
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getAssessment']
    put?: never
    post?: never
    /**
     * Deletes the current assessment for the given id
     * @description Deletes the current assessment for the given id
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    delete: operations['deleteAssessment']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/staff': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns staff details that match the name parameter
     * @description Returns staff details that match the name parameter
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getStaffDetailsByUsername']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/staff/prison/{username}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns staff details for the current prison user
     * @description Returns staff details for the current prison user
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getPrisonUserDetails']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description
     *
     *     Requires one of the following roles:
     *     * ROLE_QUEUE_ADMIN */
    get: operations['getDlqMessages']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/probation/community-offender-manager/staff-code/{staffCode}/team-caseload': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the team caseload for a community offender manager.
     * @description Returns the cases assigned to any of a community offender managers teams.
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getComTeamCaseload']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/probation/community-offender-manager/staff-code/{staffCode}/caseload': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the caseload for a community offender manager.
     * @description Returns a list of offenders that require residential checks to be performed by a community offender manager.
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getComCaseload']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prison/{prisonCode}/decision-maker/caseload': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the caseload for a decision maker within a prison
     * @description Returns a list of offenders that requires approval
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getDecisionMakerCaseload']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prison/{prisonCode}/case-admin/caseload': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the caseload for a case admin within a prison
     * @description Returns a list of offenders that require eligibility and suitability checks to be performed
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getCaseAdminCaseload']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/document/{documentSubjectType}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns pdf document
     * @description Returns pdf document
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getOffenderPdf']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the current assessment for a prisoner
     * @description Returns details of the current assessment for a prisoner
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getCurrentAssessment']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/suitability/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns a specific suitability check for a prisoner's current assessment
     * @description Returns details of a specific suitability for a prisoner's initial checks
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getSuitabilityCheck']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/standard-address-check-request/{requestId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets a standard address check request by it's request id.
     * @description Gets a standard address check request by it's request id.
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getStandardAddressCheckRequest']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/eligibility/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns a specific eligibility check for a prisoner's current assessment
     * @description Returns details of a specific eligibility for a prisoner's initial checks
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getEligibilityCriterion']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/eligibility-and-suitability': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the initial checks for a prisoner's current assessment
     * @description Returns details of the current state of a prisoner's initial checks
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getCaseView']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/contacts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the current assessments contact details
     * @description Returns the current assessments contact details
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getContacts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/address-request/{requestId}/residential-checks': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the residential checks for an offender's current assessment
     * @description Returns details of the current status of the residential checks for an offender's current assessment
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getResidentialChecksView']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/address-request/{requestId}/residential-checks/tasks/{taskCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns details of a residential checks task for an address check request
     * @description Returns details of a residential checks task for an address check request
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getResidentialChecksTask']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/address-check-requests': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns check requests that are linked to an offender's current assessment.
     * @description Returns standard and CAS check requests that are linked to an offender's current assessment.
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getAddressCheckRequestsForAssessment']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/addresses/search/{searchQuery}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Searches for addresses that match the given search text
     * @description Searches for addresses that match the given search text
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['searchForAddresses']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/address/uprn/{uprn}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets an address by it's UPRN
     * @description Gets an address by it's UPRN
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getAddressForUprn']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/support/offender/{prisonNumber}/assessment/current': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deletes the current assessment for a prisoner
     * @description Deletes details of the current assessment for a prisoner
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    delete: operations['deleteCurrentAssessment']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/address-request/{requestId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deletes an address check request for an assessment.
     * @description Deletes an address check request for an offender's current assessment.
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    delete: operations['deleteAddressCheckRequest']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    /** @description Request for updating the VLO and POM consultation information for an assessment */
    UpdateVloAndPomConsultationRequest: {
      /**
       * @description Does the case qualify for and has the victim opted in for the Victim Contact Scheme
       * @example true
       */
      victimContactSchemeOptedIn: boolean
      /**
       * @description Details of any requests the victim has made
       * @example Any exclusion zones that have been requested
       */
      victimContactSchemeRequests?: string
      /**
       * @description Information that the POM has provided about the offender's behaviour in prison
       * @example Any concerns about them being released on HDC
       */
      pomBehaviourInformation?: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    /** @description Details of the agent who is requesting a change be made to a resource */
    AgentDto: {
      /**
       * @description The name of the user requesting the change
       * @example BobSmith
       */
      username: string
      /**
       * @description The full name of the user requesting the change
       * @example Bob Smith
       */
      fullName: string
      /**
       * @description The role of the user requesting the change
       * @example PROBATION_COM
       * @enum {string}
       */
      role: 'PRISON_CA' | 'PRISON_DM' | 'PROBATION_COM' | 'SUPPORT' | 'SYSTEM'
      /**
       * @description The organisation the user requesting the change is working on behalf of
       * @example A prison code or probation team code
       */
      onBehalfOf?: string
    }
    /** @description Records an offender's non disclosable information */
    NonDisclosableInformation: {
      /**
       * @description Is there any non disclosable information
       * @example true
       */
      hasNonDisclosableInformation: boolean
      /**
       * @description Information that must not be disclosed to offender
       * @example Give details of information that cannot be disclosed.
       */
      nonDisclosableInformation?: string
    }
    /** @description Request for opting an offender out of assess for early release */
    OptOutRequest: {
      /**
       * @description The reason the offender is opting out
       * @example DOES_NOT_WANT_TO_BE_TAGGED
       * @enum {string}
       */
      reasonType: 'NOWHERE_TO_STAY' | 'DOES_NOT_WANT_TO_BE_TAGGED' | 'NO_REASON_GIVEN' | 'OTHER'
      /**
       * @description The reason the offender is opting out if reasonType is other
       * @example Reason for the offending opting out
       */
      otherDescription?: string
      /** @description Details of the agent who is requesting the opt out */
      agent: components['schemas']['AgentDto']
    }
    /** @description The answers to the question for a specific criterion */
    CriterionCheck: {
      /**
       * @description The type of criteria
       * @example eligibility
       * @enum {string}
       */
      type: 'eligibility' | 'suitability'
      /**
       * @description A unique code for the check
       * @example code-1
       */
      code: string
      /** @description A unique code for the check */
      answers: {
        [key: string]: boolean
      }
      /** @description Details of the agent who is requesting the criterion check */
      agent: components['schemas']['AgentDto']
    }
    /** @description Response object which describes an assessment */
    AssessmentSummary: {
      /**
       * Format: int64
       * @description The offender's booking id
       * @example 773722
       */
      bookingId: number
      /**
       * @description The offender's first name
       * @example Bob
       */
      forename?: string
      /**
       * @description The offender's surname
       * @example Smith
       */
      surname?: string
      /**
       * Format: date
       * @description The offender's date of birth
       * @example 2002-02-20
       */
      dateOfBirth: string
      /**
       * @description The offender's prison number
       * @example A1234AA
       */
      prisonNumber: string
      /**
       * Format: date
       * @description The offender's home detention curfew eligibility date
       * @example 2002-02-20
       */
      hdced: string
      /**
       * Format: date
       * @description The offender's conditional release date
       * @example 2002-02-20
       */
      crd?: string
      /**
       * @description The name of the prison the offender is in
       * @example Foston Hall (HMP)
       */
      location: string
      /**
       * @description The assessment status
       * @example NOT_STARTED
       * @enum {string}
       */
      status:
        | 'NOT_STARTED'
        | 'ELIGIBILITY_AND_SUITABILITY_IN_PROGRESS'
        | 'ELIGIBLE_AND_SUITABLE'
        | 'AWAITING_ADDRESS_AND_RISK_CHECKS'
        | 'ADDRESS_AND_RISK_CHECKS_IN_PROGRESS'
        | 'AWAITING_PRE_DECISION_CHECKS'
        | 'AWAITING_DECISION'
        | 'APPROVED'
        | 'AWAITING_PRE_RELEASE_CHECKS'
        | 'PASSED_PRE_RELEASE_CHECKS'
        | 'ADDRESS_UNSUITABLE'
        | 'AWAITING_REFUSAL'
        | 'INELIGIBLE_OR_UNSUITABLE'
        | 'REFUSED'
        | 'TIMED_OUT'
        | 'POSTPONED'
        | 'OPTED_OUT'
        | 'RELEASED_ON_HDC'
      /** @description The community offender manager assigned to this assessment */
      responsibleCom?: components['schemas']['ComSummary']
      /**
       * @description The team that the COM responsible for this assessment is assigned to
       * @example N55LAU
       */
      teamCode?: string
      /**
       * @description The version of the policy that this assessment has been carried out under
       * @example 1
       */
      policyVersion: string
      /** @description The status of tasks that make up this assessment */
      tasks: {
        [key: string]: components['schemas']['TaskProgress'][]
      }
      /**
       * @description The opt out reason type
       * @enum {string}
       */
      optOutReasonType?: 'NOWHERE_TO_STAY' | 'DOES_NOT_WANT_TO_BE_TAGGED' | 'NO_REASON_GIVEN' | 'OTHER'
      /** @description The opt out reason description if rhe optOutReasonType is OTHER */
      optOutReasonOther?: string
      /**
       * @description The reasons that the offender's current assessment was postponed
       * @example ON_REMAND
       */
      postponementReasons: (
        | 'PLANNING_ACTIONS_CONFIRMATION_NEEDED_BY_PRACTITIONER'
        | 'ON_REMAND'
        | 'SEGREGATED_AND_GOVERNOR_NEEDS_TO_APPROVE_RELEASE'
        | 'NEEDS_TO_SPEND_7_DAYS_IN_NORMAL_LOCATION_AFTER_SEGREGATION'
        | 'PENDING_APPLICATION_WITH_UNDULY_LENIENT_SENTENCE_SCH'
        | 'WAITING_FOR_CAS2_ACCOMMODATION_OR_APPROVED_PREMISES_PLACEMENT'
        | 'WOULD_NOT_FOLLOW_REQUIREMENTS_OF_CONFISCATION_ORDER'
        | 'BEING_INVESTIGATED_FOR_OFFENCE_COMMITTED_IN_PRISON'
      )[]
      /**
       * @description Prisoner cell location
       * @example A-1-002
       */
      cellLocation?: string
      /**
       * @description The main offense also know as the most serious offence
       * @example Robbery
       */
      mainOffense?: string
      /**
       * @description Last updated by
       * @example Aled Evans
       */
      lastUpdateBy?: string
    }
    /** @description A summary of a community offender manager */
    ComSummary: {
      /**
       * @description The staff code
       * @example A01B02C
       */
      staffCode: string
      /**
       * @description The username
       * @example X33221
       */
      username?: string
      /**
       * @description The offender managers email address
       * @example bob.jones@justice.gov.uk
       */
      email?: string
      /**
       * @description The offender managers first name
       * @example Bob
       */
      forename?: string
      /**
       * @description The offender managers surname
       * @example Jones
       */
      surname?: string
    }
    /** @description A view on the progress of suitability and eligibility criteria for a specific case */
    EligibilityAndSuitabilityCaseView: {
      /** @description A summary of an offender's current assessment */
      assessmentSummary: components['schemas']['AssessmentSummary']
      /**
       * @description Overall status of eligibility assessment
       * @example IN_PROGRESS
       * @enum {string}
       */
      overallStatus: 'ELIGIBLE' | 'INELIGIBLE' | 'IN_PROGRESS' | 'NOT_STARTED'
      /**
       * @description state of current eligibility checks
       * @example NOT_STARTED
       * @enum {string}
       */
      eligibilityStatus: 'ELIGIBLE' | 'INELIGIBLE' | 'IN_PROGRESS' | 'NOT_STARTED'
      /** @description details of current eligibility checks */
      eligibility: components['schemas']['EligibilityCriterionProgress'][]
      /**
       * @description state of current suitability checks
       * @example NOT_STARTED
       * @enum {string}
       */
      suitabilityStatus: 'SUITABLE' | 'UNSUITABLE' | 'IN_PROGRESS' | 'NOT_STARTED'
      /** @description details of current suitability checks */
      suitability: components['schemas']['SuitabilityCriterionProgress'][]
      /**
       * @description The type of the failure
       * @example INELIGIBLE
       * @enum {string}
       */
      failureType?: 'INELIGIBLE' | 'UNSUITABLE'
      /**
       * @description TaskName why someone is ineligible or unsuitable
       * @example ROTL failure to return
       */
      failedCheckReasons: string[]
    }
    /** @description The progress on a specific eligibility criterion for a case */
    EligibilityCriterionProgress: {
      /**
       * @description the unique code to identify this criterion
       * @example rotl-failure-to-return
       */
      code: string
      /**
       * @description The name of the criterion that would appear in a task list
       * @example ROTL failure to return
       */
      taskName: string
      /**
       * @description Status of this criterion for a specific case
       * @example NOT_STARTED
       * @enum {string}
       */
      status: 'ELIGIBLE' | 'INELIGIBLE' | 'IN_PROGRESS' | 'NOT_STARTED'
      /** @description The questions that are associated with this criterion for this case */
      questions: components['schemas']['Question'][]
      /** @description Details of the user that submitted the answers for this criterion */
      agent?: components['schemas']['AgentDto']
      /**
       * Format: date
       * @description The date when answers were last submitted for this criterion or null if no answers have been submitted yet
       * @example 16/08/2025
       */
      lastUpdated?: string
    }
    /** @description A question that is asked by the user */
    Question: {
      /**
       * @description The question that is posed to the user
       * @example a question...
       */
      text: string
      /**
       * @description The reason for failure
       * @example a reason
       */
      failedQuestionDescription: string
      /**
       * @description The hint html associated with this question
       * @example <p>Some hint text</p>
       */
      hint?: string
      /**
       * @description The name that the data will be stored under for this check
       * @example question1
       */
      name?: string
      /**
       * @description The answer provided by the user for this question
       * @example true
       */
      answer?: boolean
    }
    /** @description The progress on a specific suitability criteria for a case */
    SuitabilityCriterionProgress: {
      /**
       * @description the unique code to identify this criterion
       * @example rosh-and-mappa
       */
      code: string
      /**
       * @description The name of the criterion that would appear in a task list
       * @example RoSH and MAPPA
       */
      taskName: string
      /**
       * @description Status of this criterion for a specific case
       * @example NOT_STARTED
       * @enum {string}
       */
      status: 'SUITABLE' | 'UNSUITABLE' | 'IN_PROGRESS' | 'NOT_STARTED'
      /** @description The questions that are associated with this criterion for this case */
      questions: components['schemas']['Question'][]
      /** @description Details of the user that submitted the answers for this criterion */
      agent?: components['schemas']['AgentDto']
      /**
       * Format: date
       * @description The date when answers were last submitted for this criterion or null if no answers have been submitted yet
       * @example 16/08/2025
       */
      lastUpdated?: string
    }
    /** @description The progress on a task */
    TaskProgress: {
      /**
       * @description The name of an outstanding task
       * @example ASSESS_ELIGIBILITY
       * @enum {string}
       */
      name:
        | 'ASSESS_ELIGIBILITY'
        | 'ENTER_CURFEW_ADDRESS'
        | 'COMPLETE_PRE_RELEASE_CHECKS'
        | 'REVIEW_APPLICATION_AND_SEND_FOR_DECISION'
        | 'COMPLETE_14_DAY_CHECKS'
        | 'COMPLETE_2_DAY_CHECKS'
        | 'PRINT_LICENCE'
        | 'CONSULT_THE_VLO_AND_POM'
        | 'CHECK_ADDRESSES_OR_COMMUNITY_ACCOMMODATION'
        | 'RECORD_NON_DISCLOSABLE_INFORMATION'
        | 'MAKE_A_RISK_MANAGEMENT_DECISION'
        | 'SEND_CHECKS_TO_PRISON'
        | 'CREATE_LICENCE'
        | 'CONFIRM_RELEASE'
        | 'APPROVE_LICENCE'
        | 'OPT_IN'
      /**
       * @description The state of this task for a specific assessment
       * @example Smith
       * @enum {string}
       */
      progress: 'LOCKED' | 'READY_TO_START' | 'IN_PROGRESS' | 'COMPLETE'
    }
    /** @description Request for updating the case admin additional information for an address check request */
    UpdateCaseAdminAdditionInfoRequest: {
      /**
       * @description The case admin additional information about an address check request
       * @example Additional information...
       */
      additionalInformation: string
    }
    /** @description Request for adding a standard address check request */
    AddStandardAddressCheckRequest: {
      /**
       * @description Any additional information added by the case admin
       * @example Additional information about this address...
       */
      caAdditionalInfo?: string
      /**
       * @description Any additional information added by the probation practitioner
       * @example Additional information about this address...
       */
      ppAdditionalInfo?: string
      /**
       * @description The offenders priority for this address
       * @example SECOND
       * @enum {string}
       */
      preferencePriority: 'FIRST' | 'SECOND'
      /**
       * @description The UPRN of the address to check
       * @example 200010019924
       */
      addressUprn: string
    }
    /** @description Response object which describes an address */
    AddressSummary: {
      /**
       * @description The address's UPRN
       * @example 200010019924
       */
      uprn: string
      /**
       * @description The address's first line
       * @example 34
       */
      firstLine?: string
      /**
       * @description The address's second line
       * @example Urchfont
       */
      secondLine?: string
      /**
       * @description The address's town
       * @example Chippenham
       */
      town: string
      /**
       * @description The address's county
       * @example Shropshire
       */
      county: string
      /**
       * @description The address's postcode
       * @example RG13HS
       */
      postcode: string
      /**
       * @description The address's country
       * @example Wales
       */
      country: string
      /**
       * Format: double
       * @description The address's x-coordinate
       * @example 401003.0,
       */
      xcoordinate: number
      /**
       * Format: double
       * @description The address's y-coordinate
       * @example 154111
       */
      ycoordinate: number
      /**
       * Format: date
       * @description The date the address was last updated
       * @example 2021-05-23
       */
      addressLastUpdated: string
    }
    /** @description Response object which describes an assessment */
    ResidentSummary: {
      /**
       * Format: int64
       * @description A unique internal reference for the resident
       * @example 87320
       */
      residentId: number
      /**
       * @description The resident's forename
       * @example Dave
       */
      forename: string
      /**
       * @description The resident's surname
       * @example Jones
       */
      surname: string
      /**
       * @description The resident's phone number
       * @example 07634183674
       */
      phoneNumber?: string
      /**
       * @description The resident's relation to the offender
       * @example Mother
       */
      relation?: string
      /**
       * Format: date
       * @description The resident's date of birth
       * @example 2002-02-20
       */
      dateOfBirth?: string
      /**
       * Format: int32
       * @description The resident's age
       * @example 42
       */
      age?: number
      /**
       * @description Is this main resident at the address
       * @example true
       */
      isMainResident: boolean
      /**
       * @description Is offender a main resident at the address
       * @example true
       */
      isOffender: boolean
    }
    /** @description Response object which describes a standard address check request */
    StandardAddressCheckRequestSummary: Omit<
      WithRequired<
        components['schemas']['CheckRequestSummary'],
        'dateRequested' | 'preferencePriority' | 'requestId' | 'requestType' | 'status'
      >,
      'requestType'
    > & {
      /**
       * @description Type of this check request
       * @example STANDARD_ADDRESS
       * @enum {string}
       */
      requestType: 'STANDARD_ADDRESS'
      /**
       * @description The address the check request is for
       * @example See AddressSummary
       */
      address: components['schemas']['AddressSummary']
      /**
       * @description The residents the check request is for
       * @example See ResidentSummary
       */
      residents: components['schemas']['ResidentSummary'][]
    } & {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      requestType: 'STANDARD_ADDRESS'
    }
    /** @description Request for adding a resident to a standard address check request */
    AddResidentRequest: {
      /**
       * Format: int64
       * @description A unique internal reference for the resident
       * @example 87320
       */
      residentId?: number
      /**
       * @description The resident's forename
       * @example Dave
       */
      forename: string
      /**
       * @description The resident's surname
       * @example Jones
       */
      surname: string
      /**
       * @description The resident's phone number
       * @example 07634183674
       */
      phoneNumber?: string
      /**
       * @description The resident's relation to the offender
       * @example Mother
       */
      relation?: string
      /**
       * Format: date
       * @description The resident's date of birth
       * @example 2002-02-20
       */
      dateOfBirth?: string
      /**
       * Format: int32
       * @description The resident's age
       * @example 42
       */
      age?: number
      /**
       * @description Is this main resident at the address
       * @example true
       */
      isMainResident: boolean
      /**
       * @description Is offender a main resident at the address
       * @example true
       */
      isOffender: boolean
    }
    /** @description Request for adding a CAS check request */
    AddCasCheckRequest: {
      /**
       * @description Any additional information added by the case admin
       * @example Additional information about this address...
       */
      caAdditionalInfo?: string
      /**
       * @description Any additional information added by the probation practitioner
       * @example Additional information about this address...
       */
      ppAdditionalInfo?: string
      /**
       * @description The offenders priority for this address
       * @example SECOND
       * @enum {string}
       */
      preferencePriority: 'FIRST' | 'SECOND'
    }
    /** @description Response object which describes a CAS check request */
    CasCheckRequestSummary: Omit<
      WithRequired<
        components['schemas']['CheckRequestSummary'],
        'dateRequested' | 'preferencePriority' | 'requestId' | 'requestType' | 'status'
      >,
      'requestType'
    > & {
      /**
       * @description Type of this check request
       * @example CAS
       * @enum {string}
       */
      requestType: 'CAS'
      /**
       * @description The address the check request is for
       * @example See AddressSummary
       */
      allocatedAddress?: components['schemas']['AddressSummary']
    } & {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      requestType: 'CAS'
    }
    /** @description The request type to save a set of answers for a residential checks task. */
    SaveResidentialChecksTaskAnswersRequest: {
      /** @description The task code for these answers relate to */
      taskCode: string
      /** @description A map of answer codes to answer values */
      answers: components['schemas']['MapStringAny']
      /** @description Details of the agent that is submitting the answers */
      agent: components['schemas']['AgentDto']
    }
    /** @description The answers to a residential checks task. */
    ResidentialChecksTaskAnswersSummary: {
      /**
       * Format: int64
       * @description A unique identifier the address check request associated with these answers
       */
      addressCheckRequestId: number
      /** @description The task code for these answers relate to */
      taskCode: string
      /** @description A map of answer codes to answer values */
      answers: components['schemas']['MapStringAny']
      /** @description The version of the task these answers relate to */
      taskVersion: string
    }
    ProblemDetail: {
      type?: unknown
      title?: unknown
      status?: unknown
      detail?: unknown
      instance?: unknown
    } & {
      [key: string]: unknown | unknown | unknown
    }
    /** @description Response object which describes an offender */
    OffenderResponse: {
      /**
       * @description The offender's prisoner number
       * @example A1234AA
       */
      prisonNumber: string
      /**
       * @description The prison code
       * @example BRS
       */
      prisonId: string
      /**
       * @description The offender's first name
       * @example Bob
       */
      forename: string
      /**
       * @description The offender's surname
       * @example Smith
       */
      surname: string
      /**
       * Format: date
       * @description The offender's date of birth
       * @example 2002-02-20
       */
      dateOfBirth: string
      /**
       * Format: date
       * @description The offender's home detention curfew eligibility date
       * @example 2026-08-23
       */
      hdced: string
      /**
       * Format: date
       * @description The offender's conditional release date date
       * @example 2026-08-23
       */
      crd?: string
      /**
       * @description The case reference number assigned to a person on probation in NDelius
       * @example DX12340A
       */
      crn?: string
      /**
       * Format: date
       * @description The sentence start date
       * @example 2028-06-23
       */
      sentenceStartDate?: string
      /**
       * Format: date-time
       * @description The create timestamp for the afer offender
       * @example 2020-01-11T12:13:00
       */
      createdTimestamp: string
      /**
       * Format: date-time
       * @description The offender's conditional release date date
       * @example 2020-01-11T12:13:00
       */
      lastUpdatedTimestamp?: string
    }
    /** @description Response object which describes an assessment */
    AssessmentSearchResponse: {
      /**
       * Format: int64
       * @description The assessment id
       * @example 722
       */
      id: number
      /**
       * Format: int64
       * @description The offender's booking id
       * @example 773722
       */
      bookingId: number
      /**
       * @description The status
       * @example NOT_STARTED
       * @enum {string}
       */
      status:
        | 'NOT_STARTED'
        | 'ELIGIBILITY_AND_SUITABILITY_IN_PROGRESS'
        | 'ELIGIBLE_AND_SUITABLE'
        | 'AWAITING_ADDRESS_AND_RISK_CHECKS'
        | 'ADDRESS_AND_RISK_CHECKS_IN_PROGRESS'
        | 'AWAITING_PRE_DECISION_CHECKS'
        | 'AWAITING_DECISION'
        | 'APPROVED'
        | 'AWAITING_PRE_RELEASE_CHECKS'
        | 'PASSED_PRE_RELEASE_CHECKS'
        | 'ADDRESS_UNSUITABLE'
        | 'AWAITING_REFUSAL'
        | 'INELIGIBLE_OR_UNSUITABLE'
        | 'REFUSED'
        | 'TIMED_OUT'
        | 'POSTPONED'
        | 'OPTED_OUT'
        | 'RELEASED_ON_HDC'
      /**
       * @description The previous status
       * @example NOT_STARTED
       * @enum {string}
       */
      previousStatus?:
        | 'NOT_STARTED'
        | 'ELIGIBILITY_AND_SUITABILITY_IN_PROGRESS'
        | 'ELIGIBLE_AND_SUITABLE'
        | 'AWAITING_ADDRESS_AND_RISK_CHECKS'
        | 'ADDRESS_AND_RISK_CHECKS_IN_PROGRESS'
        | 'AWAITING_PRE_DECISION_CHECKS'
        | 'AWAITING_DECISION'
        | 'APPROVED'
        | 'AWAITING_PRE_RELEASE_CHECKS'
        | 'PASSED_PRE_RELEASE_CHECKS'
        | 'ADDRESS_UNSUITABLE'
        | 'AWAITING_REFUSAL'
        | 'INELIGIBLE_OR_UNSUITABLE'
        | 'REFUSED'
        | 'TIMED_OUT'
        | 'POSTPONED'
        | 'OPTED_OUT'
        | 'RELEASED_ON_HDC'
      /**
       * Format: date-time
       * @description The create timestamp for the assessment
       * @example 2020-01-11T12:13:00
       */
      createdTimestamp: string
      /**
       * Format: date-time
       * @description The update timestamp for the assessment
       * @example 2020-01-11T12:13:00
       */
      lastUpdatedTimestamp?: string
      /**
       * Format: date-time
       * @description The delete timestamp for the assessment
       * @example 2020-01-11T12:13:00
       */
      deletedTimestamp?: string
    }
    /** @description Response object which describes an offender */
    OffenderSearchResponse: {
      /**
       * @description The offender's prisoner number
       * @example A1234AA
       */
      prisonNumber: string
      /**
       * @description The prison code
       * @example BRS
       */
      prisonId: string
      /**
       * @description The offender's first name
       * @example Bob
       */
      forename: string
      /**
       * @description The offender's surname
       * @example Smith
       */
      surname: string
      /**
       * Format: date
       * @description The offender's date of birth
       * @example 2002-02-20
       */
      dateOfBirth: string
      /**
       * @description The case reference number assigned to a person on probation in NDelius
       * @example DX12340A
       */
      crn?: string
    }
    /** @description Response object which describes an assessment */
    AssessmentResponse: {
      /**
       * Format: int64
       * @description The assessment id
       * @example 722
       */
      id: number
      /**
       * Format: int64
       * @description The offender's booking id
       * @example 773722
       */
      bookingId: number
      /**
       * @description The status
       * @example NOT_STARTED
       * @enum {string}
       */
      status:
        | 'NOT_STARTED'
        | 'ELIGIBILITY_AND_SUITABILITY_IN_PROGRESS'
        | 'ELIGIBLE_AND_SUITABLE'
        | 'AWAITING_ADDRESS_AND_RISK_CHECKS'
        | 'ADDRESS_AND_RISK_CHECKS_IN_PROGRESS'
        | 'AWAITING_PRE_DECISION_CHECKS'
        | 'AWAITING_DECISION'
        | 'APPROVED'
        | 'AWAITING_PRE_RELEASE_CHECKS'
        | 'PASSED_PRE_RELEASE_CHECKS'
        | 'ADDRESS_UNSUITABLE'
        | 'AWAITING_REFUSAL'
        | 'INELIGIBLE_OR_UNSUITABLE'
        | 'REFUSED'
        | 'TIMED_OUT'
        | 'POSTPONED'
        | 'OPTED_OUT'
        | 'RELEASED_ON_HDC'
      /**
       * @description The previous status
       * @example NOT_STARTED
       * @enum {string}
       */
      previousStatus?:
        | 'NOT_STARTED'
        | 'ELIGIBILITY_AND_SUITABILITY_IN_PROGRESS'
        | 'ELIGIBLE_AND_SUITABLE'
        | 'AWAITING_ADDRESS_AND_RISK_CHECKS'
        | 'ADDRESS_AND_RISK_CHECKS_IN_PROGRESS'
        | 'AWAITING_PRE_DECISION_CHECKS'
        | 'AWAITING_DECISION'
        | 'APPROVED'
        | 'AWAITING_PRE_RELEASE_CHECKS'
        | 'PASSED_PRE_RELEASE_CHECKS'
        | 'ADDRESS_UNSUITABLE'
        | 'AWAITING_REFUSAL'
        | 'INELIGIBLE_OR_UNSUITABLE'
        | 'REFUSED'
        | 'TIMED_OUT'
        | 'POSTPONED'
        | 'OPTED_OUT'
        | 'RELEASED_ON_HDC'
      /**
       * Format: date-time
       * @description The create timestamp for the assessment
       * @example 2020-01-11T12:13:00
       */
      createdTimestamp: string
      /**
       * Format: date-time
       * @description The update timestamp for the assessment
       * @example 2020-01-11T12:13:00
       */
      lastUpdatedTimestamp?: string
      /**
       * Format: date-time
       * @description The delete timestamp for the assessment
       * @example 2020-01-11T12:13:00
       */
      deletedTimestamp?: string
      /**
       * @description The version of the policy that this assessment has been carried out under
       * @example 1
       */
      policyVersion: string
      /** @description Assessment address checks complete */
      addressChecksComplete: boolean
      /** @description The community offender manager assigned to this assessment */
      responsibleCom?: components['schemas']['ComSummary']
      /**
       * @description The team that the COM responsible for this assessment is assigned to
       * @example N55LAU
       */
      teamCode?: string
      /**
       * Format: date
       * @description The postponement date
       * @example 2026-08-23
       */
      postponementDate?: string
      /**
       * @description The opt out reason type
       * @enum {string}
       */
      optOutReasonType?: 'NOWHERE_TO_STAY' | 'DOES_NOT_WANT_TO_BE_TAGGED' | 'NO_REASON_GIVEN' | 'OTHER'
      /** @description The opt out reason description if rhe optOutReasonType is OTHER */
      optOutReasonOther: string
    }
    Detail: {
      code: string
      description?: string
    }
    Name: {
      forename: string
      middleName?: string
      surname: string
    }
    User: {
      /** Format: int64 */
      id?: number
      code?: string
      name?: components['schemas']['Name']
      teams?: components['schemas']['Detail'][]
      username?: string
      email?: string
      unallocated?: boolean
    }
    PrisonApiUserDetail: {
      /** Format: int64 */
      staffId: number
      username: string
      firstName: string
      lastName: string
      /** Format: int64 */
      thumbnailId?: number
      activeCaseLoadId?: string
      accountStatus: string
      /** Format: date-time */
      lockDate?: string
      /** Format: date-time */
      expiryDate?: string
      lockedFlag?: boolean
      expiredFlag?: boolean
      active: boolean
    }
    DlqMessage: {
      body: {
        [key: string]: Record<string, never>
      }
      messageId: string
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    /** @description Response object which describes an offender */
    OffenderSummaryResponse: {
      /**
       * @description The offender's prisoner number
       * @example A1234AA
       */
      prisonNumber: string
      /**
       * Format: int64
       * @description The offender's booking id
       * @example 773722
       */
      bookingId: number
      /**
       * @description The offender's first name
       * @example Bob
       */
      forename: string
      /**
       * @description The offender's surname
       * @example Smith
       */
      surname: string
      /**
       * Format: date
       * @description The offender's conditional release date date
       * @example 2026-08-23
       */
      crd?: string
      /**
       * Format: date
       * @description The offender's home detention curfew eligibility date
       * @example 2026-08-23
       */
      hdced: string
      /**
       * Format: int32
       * @description The number of working days until the home detention curfew eligibility date
       * @example 15
       */
      workingDaysToHdced: number
      /**
       * @description The full name of the probation practitioner responsible for this offender
       * @example Mark Coombes
       */
      probationPractitioner?: string
      /**
       * @description Whether the offender's current assessment has been postponed or not
       * @example True
       */
      isPostponed: boolean
      /**
       * Format: date
       * @description The date that the offender's current assessment was postponed
       * @example 2028-06-23
       */
      postponementDate?: string
      /**
       * @description The reasons that the offender's current assessment was postponed
       * @example ON_REMAND
       */
      postponementReasons: (
        | 'PLANNING_ACTIONS_CONFIRMATION_NEEDED_BY_PRACTITIONER'
        | 'ON_REMAND'
        | 'SEGREGATED_AND_GOVERNOR_NEEDS_TO_APPROVE_RELEASE'
        | 'NEEDS_TO_SPEND_7_DAYS_IN_NORMAL_LOCATION_AFTER_SEGREGATION'
        | 'PENDING_APPLICATION_WITH_UNDULY_LENIENT_SENTENCE_SCH'
        | 'WAITING_FOR_CAS2_ACCOMMODATION_OR_APPROVED_PREMISES_PLACEMENT'
        | 'WOULD_NOT_FOLLOW_REQUIREMENTS_OF_CONFISCATION_ORDER'
        | 'BEING_INVESTIGATED_FOR_OFFENCE_COMMITTED_IN_PRISON'
      )[]
      /**
       * @description The status of the offender's current assessment
       * @example AWAITING_ADDRESS_AND_RISK_CHECKS
       * @enum {string}
       */
      status:
        | 'NOT_STARTED'
        | 'ELIGIBILITY_AND_SUITABILITY_IN_PROGRESS'
        | 'ELIGIBLE_AND_SUITABLE'
        | 'AWAITING_ADDRESS_AND_RISK_CHECKS'
        | 'ADDRESS_AND_RISK_CHECKS_IN_PROGRESS'
        | 'AWAITING_PRE_DECISION_CHECKS'
        | 'AWAITING_DECISION'
        | 'APPROVED'
        | 'AWAITING_PRE_RELEASE_CHECKS'
        | 'PASSED_PRE_RELEASE_CHECKS'
        | 'ADDRESS_UNSUITABLE'
        | 'AWAITING_REFUSAL'
        | 'INELIGIBLE_OR_UNSUITABLE'
        | 'REFUSED'
        | 'TIMED_OUT'
        | 'POSTPONED'
        | 'OPTED_OUT'
        | 'RELEASED_ON_HDC'
      /**
       * @description Whether the address checks for the offender's current assessment have been completed or not
       * @example false
       */
      addressChecksComplete: boolean
      /**
       * @description The current task for the offender's current assessment, if there is no next task then null will be returned
       * @example Assess eligibility and suitability
       * @enum {string}
       */
      currentTask?:
        | 'ASSESS_ELIGIBILITY'
        | 'ENTER_CURFEW_ADDRESS'
        | 'COMPLETE_PRE_RELEASE_CHECKS'
        | 'REVIEW_APPLICATION_AND_SEND_FOR_DECISION'
        | 'COMPLETE_14_DAY_CHECKS'
        | 'COMPLETE_2_DAY_CHECKS'
        | 'PRINT_LICENCE'
        | 'CONSULT_THE_VLO_AND_POM'
        | 'CHECK_ADDRESSES_OR_COMMUNITY_ACCOMMODATION'
        | 'RECORD_NON_DISCLOSABLE_INFORMATION'
        | 'MAKE_A_RISK_MANAGEMENT_DECISION'
        | 'SEND_CHECKS_TO_PRISON'
        | 'CREATE_LICENCE'
        | 'CONFIRM_RELEASE'
        | 'APPROVE_LICENCE'
        | 'OPT_IN'
      /**
       * Format: date
       * @description The date that the current task overdue on
       * @example 2028-06-23
       */
      taskOverdueOn?: string
      /**
       * @description The case reference number assigned to a person on probation in NDelius
       * @example DX12340A
       */
      crn?: string
      /**
       * @description Last updated by
       * @example Aled Evans
       */
      lastUpdateBy?: string
    }
    /** @description Response object which describes an assessment */
    AssessmentOverviewSummary: {
      /**
       * Format: int64
       * @description The offender's booking id
       * @example 773722
       */
      bookingId: number
      /**
       * @description The offender's first name
       * @example Bob
       */
      forename?: string
      /**
       * @description The offender's surname
       * @example Smith
       */
      surname?: string
      /**
       * Format: date
       * @description The offender's date of birth
       * @example 2002-02-20
       */
      dateOfBirth: string
      /**
       * @description The offender's prison number
       * @example A1234AA
       */
      prisonNumber: string
      /**
       * Format: date
       * @description The offender's home detention curfew eligibility date
       * @example 2002-02-20
       */
      hdced: string
      /**
       * Format: date
       * @description The offender's conditional release date
       * @example 2002-02-20
       */
      crd?: string
      /**
       * @description The name of the prison the offender is in
       * @example Foston Hall (HMP)
       */
      location: string
      /**
       * @description The assessment status
       * @example NOT_STARTED
       * @enum {string}
       */
      status:
        | 'NOT_STARTED'
        | 'ELIGIBILITY_AND_SUITABILITY_IN_PROGRESS'
        | 'ELIGIBLE_AND_SUITABLE'
        | 'AWAITING_ADDRESS_AND_RISK_CHECKS'
        | 'ADDRESS_AND_RISK_CHECKS_IN_PROGRESS'
        | 'AWAITING_PRE_DECISION_CHECKS'
        | 'AWAITING_DECISION'
        | 'APPROVED'
        | 'AWAITING_PRE_RELEASE_CHECKS'
        | 'PASSED_PRE_RELEASE_CHECKS'
        | 'ADDRESS_UNSUITABLE'
        | 'AWAITING_REFUSAL'
        | 'INELIGIBLE_OR_UNSUITABLE'
        | 'REFUSED'
        | 'TIMED_OUT'
        | 'POSTPONED'
        | 'OPTED_OUT'
        | 'RELEASED_ON_HDC'
      /** @description The community offender manager assigned to this assessment */
      responsibleCom?: components['schemas']['ComSummary']
      /**
       * @description The team that the COM responsible for this assessment is assigned to
       * @example N55LAU
       */
      teamCode?: string
      /**
       * @description The version of the policy that this assessment has been carried out under
       * @example 1
       */
      policyVersion: string
      /** @description The status of tasks that make up this assessment */
      tasks: {
        [key: string]: components['schemas']['TaskProgress'][]
      }
      /**
       * @description The opt out reason type
       * @enum {string}
       */
      optOutReasonType?: 'NOWHERE_TO_STAY' | 'DOES_NOT_WANT_TO_BE_TAGGED' | 'NO_REASON_GIVEN' | 'OTHER'
      /** @description The opt out reason description if rhe optOutReasonType is OTHER */
      optOutReasonOther?: string
      /**
       * @description Prisoner cell location
       * @example A-1-002
       */
      cellLocation?: string
      /**
       * @description The main offense also know as the most serious offence
       * @example Robbery
       */
      mainOffense?: string
      /**
       * Format: date
       * @description The assessment created date plus five days
       * @example 2002-02-20
       */
      toDoEligibilityAndSuitabilityBy?: string
      /**
       * @description The assessment's assess eligibility and suitability task result
       * @example Ineligible
       */
      result?: string
      /**
       * @description Indicates whether the prisoner's information is non-disclosable
       * @example false
       */
      hasNonDisclosableInformation?: boolean
      /**
       * @description Reason why the prisoner's information is non-disclosable
       * @example Security concerns
       */
      nonDisclosableInformation?: string
      /**
       * @description Does the case qualify for and has the victim opted in for the Victim Contact Scheme
       * @example true
       */
      victimContactSchemeOptedIn?: boolean
      /**
       * @description Details of any requests the victim has made
       * @example Any exclusion zones that have been requested
       */
      victimContactSchemeRequests?: string
      /**
       * @description Information that the POM has provided about the offender's behaviour in prison
       * @example Any concerns about them being released on HDC
       */
      pomBehaviourInformation?: string
      /**
       * @description Last updated by
       * @example Aled Evans
       */
      lastUpdateBy?: string
    }
    /** @description The details of a specific suitability criterion */
    SuitabilityCriterionView: {
      /** @description A summary of an offender's current assessment */
      assessmentSummary: components['schemas']['AssessmentSummary']
      /** @description progress on this criterion */
      criterion: components['schemas']['SuitabilityCriterionProgress']
      /** @description progress about the next criterion */
      nextCriterion?: components['schemas']['SuitabilityCriterionProgress']
    }
    /** @description The details of a specific eligibility criterion */
    EligibilityCriterionView: {
      /** @description A summary of an offender's current assessment */
      assessmentSummary: components['schemas']['AssessmentSummary']
      /** @description progress on this criterion */
      criterion: components['schemas']['EligibilityCriterionProgress']
      /** @description progress on the next criterion */
      nextCriterion?: components['schemas']['EligibilityCriterionProgress']
    }
    /** @description A response to contain assessment contacts */
    AssessmentContactsResponse: {
      /** @description a set of contacts associated with the assessment */
      contacts: components['schemas']['ContactResponse'][]
    }
    /** @description Details of a contact */
    ContactResponse: {
      /**
       * @description The full name of the contact
       * @example Bob Smith
       */
      fullName: string
      /**
       * @description The contact type
       * @example CASE_ADMINISTRATOR
       * @enum {string}
       */
      userRole: 'PRISON_CA' | 'PRISON_DM' | 'PROBATION_COM' | 'SUPPORT' | 'SYSTEM'
      /**
       * @description The email address of the contact
       * @example bob.jones@justice.gov.uk
       */
      email?: string
      /**
       * @description The location name of the contact
       * @example Foston Hall (HMP)
       */
      locationName?: string
    }
    Input: {
      name: string
      /** @enum {string} */
      type: 'TEXT' | 'RADIO' | 'DATE' | 'ADDRESS' | 'CHECKBOX'
      options?: components['schemas']['Option'][]
    }
    Option: {
      text: string
      value: string
    }
    /** @description The progress on a specific residential checks task for an assessment */
    ResidentialChecksTaskProgress: {
      /** @description Details of the task */
      config: components['schemas']['Task']
      /**
       * @description Status of this criterion for a specific case
       * @example NOT_STARTED
       * @enum {string}
       */
      status: 'NOT_STARTED' | 'IN_PROGRESS' | 'UNSUITABLE' | 'SUITABLE'
      /** @description A map of answer codes to answer values */
      answers: components['schemas']['MapStringAny']
    }
    /** @description A view on the progress of the residential checks for an assessment */
    ResidentialChecksView: {
      /** @description A summary of an offender's current assessment */
      assessmentSummary: components['schemas']['AssessmentSummary']
      /**
       * @description Overall status of residential checks for the assessment
       * @example IN_PROGRESS
       * @enum {string}
       */
      overallStatus: 'NOT_STARTED' | 'IN_PROGRESS' | 'UNSUITABLE' | 'SUITABLE'
      /** @description Details of current residential checks */
      tasks: components['schemas']['ResidentialChecksTaskProgress'][]
    }
    Section: {
      header?: string
      hintText?: string
      questions: components['schemas']['TaskQuestion'][]
    }
    Task: {
      code: string
      name: string
      sections: components['schemas']['Section'][]
    }
    TaskQuestion: {
      code: string
      text: string
      hintText?: string
      input: components['schemas']['Input']
    }
    /** @description A view on the progress of the residential checks for an assessment */
    ResidentialChecksTaskView: {
      /** @description A summary of an offender's current assessment */
      assessmentSummary: components['schemas']['AssessmentSummary']
      /** @description Details of the task */
      taskConfig: components['schemas']['Task']
      /**
       * @description The current status of the task
       * @enum {string}
       */
      taskStatus: 'NOT_STARTED' | 'IN_PROGRESS' | 'UNSUITABLE' | 'SUITABLE'
      /** @description A map of answer codes to answer values */
      answers: components['schemas']['MapStringAny']
    }
    /** @description Describes a check request, a discriminator exists to distinguish between different types of check requests */
    CheckRequestSummary: {
      requestType: string
      /**
       * Format: int64
       * @description Unique internal identifier for this request
       * @example 123344
       */
      requestId: number
      /**
       * @description The status of the check request
       * @example SUITABLE
       * @enum {string}
       */
      status: 'IN_PROGRESS' | 'UNSUITABLE' | 'SUITABLE'
      /**
       * @description Any additional information on the request added by the case administrator
       * @example Some additional info
       */
      caAdditionalInfo?: string
      /**
       * @description Any additional information on the request added by the probation practitioner
       * @example Some additional info
       */
      ppAdditionalInfo?: string
      /**
       * @description The priority of the check request
       * @example SECOND
       * @enum {string}
       */
      preferencePriority: 'FIRST' | 'SECOND'
      /**
       * Format: date-time
       * @description The date / time the check was requested on
       * @example 22/11/2026T10:43:28
       */
      dateRequested: string
    } & (components['schemas']['StandardAddressCheckRequestSummary'] | components['schemas']['CasCheckRequestSummary'])
    MapStringAny: {
      [key: string]: unknown | unknown
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export interface operations {
  retryDlq: {
    parameters: {
      query?: never
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
    }
  }
  retryAllDlqs: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      query?: never
      header?: never
      path: {
        queueName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
    }
  }
  updateVloAndPomConsultation: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateVloAndPomConsultationRequest']
      }
    }
    responses: {
      /** @description The vlo and pom consultation information has been updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  submitForPreDecisionChecks: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AgentDto']
      }
    }
    responses: {
      /** @description The offender's current assessment has been sent to the prison case admin for checking. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find an offender with the provided prison number */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  submitForAddressChecks: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AgentDto']
      }
    }
    responses: {
      /** @description The offender's current assessment has been submitted for address checks. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find an offender with the provided prison number */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  recordNonDisclosableInformation: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NonDisclosableInformation']
      }
    }
    responses: {
      /** @description The offender's non disclosable information has been recorded. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find an offender with the provided prison number */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  postponeCase: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': unknown
      }
    }
    responses: {
      /** @description The offenders case has been postponed for early release. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  optOut: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OptOutRequest']
      }
    }
    responses: {
      /** @description The offender has been opted out of assess for early release. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  optBackIn: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AgentDto']
      }
    }
    responses: {
      /** @description The offender has been opted back into being assessed for early release. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  answerCheck: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CriterionCheck']
      }
    }
    responses: {
      /** @description Returns the current eligibility and suitability status for an assessment */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EligibilityAndSuitabilityCaseView']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateCaseAdminAdditionalInformation: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
        requestId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCaseAdminAdditionInfoRequest']
      }
    }
    responses: {
      /** @description The case admin additional information has been updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description An address check request with the specified id does not exist for the offender */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addStandardAddressCheckRequest: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AddStandardAddressCheckRequest']
      }
    }
    responses: {
      /** @description The standard address check request has been added to the offender's current assessment. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['StandardAddressCheckRequestSummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addStandardAddressCheckRequestResident: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
        requestId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AddResidentRequest'][]
      }
    }
    responses: {
      /** @description The resident has been added to the standard address check request. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ResidentSummary'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description A standard address check request with the specified request id does not exist for the offender */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addCasCheckRequest: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AddCasCheckRequest']
      }
    }
    responses: {
      /** @description The CAS check request has been added to the current assessment for the offender. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CasCheckRequestSummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  saveResidentialChecksTaskAnswers: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
        requestId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SaveResidentialChecksTaskAnswersRequest']
      }
    }
    responses: {
      /** @description The task answers have been saved. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ResidentialChecksTaskAnswersSummary']
        }
      }
      /** @description The request is invalid, e.g. the answers are not valid for the task */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetail']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description An address check request with the specified request id does not exist for the provided offender */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffender: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returned the offender for the given prison number */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAssessments: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returned the assessments for the given prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AssessmentSearchResponse'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  searchForOffender: {
    parameters: {
      query?: never
      header?: never
      path: {
        searchString: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returned the offender for the given search string */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderSearchResponse'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAssessment: {
    parameters: {
      query?: never
      header?: never
      path: {
        assessmentId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returned the assessment for a given assessment ID */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AssessmentResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find an assessment for given assessment id */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteAssessment: {
    parameters: {
      query?: never
      header?: never
      path: {
        assessmentId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns No Content status code */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getStaffDetailsByUsername: {
    parameters: {
      query: {
        username: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns staff details matching the supplied name */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find staff with username */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonUserDetails: {
    parameters: {
      query?: never
      header?: never
      path: {
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns staff details for the current prison user */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonApiUserDetail']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the current user */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
    }
  }
  getComTeamCaseload: {
    parameters: {
      query?: never
      header?: never
      path: {
        staffCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a list of cases assigned to any of the teams that the user is assigned to */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderSummaryResponse'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getComCaseload: {
    parameters: {
      query?: never
      header?: never
      path: {
        staffCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a list of offenders that require residential checks to be performed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderSummaryResponse'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDecisionMakerCaseload: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a list of offenders that requires approval */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderSummaryResponse'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCaseAdminCaseload: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a list of offenders that require eligibility and suitability checks to be performed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderSummaryResponse'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderPdf: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
        documentSubjectType:
          | 'OFFENDER_NOT_ELIGIBLE_FORM'
          | 'OFFENDER_POSTPONED_FORM'
          | 'OFFENDER_REFUSED_FORM'
          | 'OFFENDER_ELIGIBLE_FORM'
          | 'OFFENDER_ADDRESS_CHECKS_INFORMATION_FORM'
          | 'OFFENDER_ADDRESS_CHECKS_FORM'
          | 'OFFENDER_OPT_OUT_FORM'
          | 'OFFENDER_ADDRESS_UNSUITABLE_FORM'
          | 'OFFENDER_NOT_ENOUGH_TIME_FORM'
          | 'OFFENDER_APPROVED_FORM'
          | 'OFFENDER_AGENCY_NOTIFICATION_FORM'
          | 'OFFENDER_CANCEL_AGENCY_NOTIFICATION_FORM'
          | 'OFFENDER_NOT_SUITABLE_FORM'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns pdf document */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/pdf': string
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error occurred while generating your pdf document */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCurrentAssessment: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns the current assessment for the prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AssessmentOverviewSummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSuitabilityCheck: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns details of a specific suitability criteria in the current assessment for the prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SuitabilityCriterionView']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getStandardAddressCheckRequest: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
        requestId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns the standard address check request with the specified request id */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['StandardAddressCheckRequestSummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description A standard address check request with the specified request id does not exist for the offender */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getEligibilityCriterion: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns details of a specific eligibility criteria in the current assessment for the prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EligibilityCriterionView']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCaseView: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns the current assessment for the prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EligibilityAndSuitabilityCaseView']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getContacts: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns the current assessments contact details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AssessmentContactsResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getResidentialChecksView: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
        requestId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns the residential checks for the offender's current assessment */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ResidentialChecksView']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description An offender with the provided prison number does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getResidentialChecksTask: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
        requestId: number
        taskCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns details of the residential check task with the specified code for the specified address check request */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ResidentialChecksTaskView']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description An address check request with provided id and prison number does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAddressCheckRequestsForAssessment: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Address check requests linked to the offender's current assessment are returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CheckRequestSummary'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found, an offender with provider number cannot be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  searchForAddresses: {
    parameters: {
      query?: never
      header?: never
      path: {
        searchQuery: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns addresses matching the given search text */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AddressSummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAddressForUprn: {
    parameters: {
      query?: never
      header?: never
      path: {
        uprn: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns the address with the provided UPRN */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AddressSummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCurrentAssessment: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns No Content status code */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteAddressCheckRequest: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
        requestId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The address check request has been deleted. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description An address check request with the specified id does not exist for the offender */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}

type WithRequired<T, K extends keyof T> = T & {
  [P in K]-?: T[P]
}
