/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/queue-admin/retry-dlq/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** @description
     *
     *     Requires one of the following roles:
     *     * ROLE_QUEUE_ADMIN */
    put: operations['retryDlq']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/retry-all-dlqs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['retryAllDlqs']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/purge-queue/{queueName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** @description
     *
     *     Requires one of the following roles:
     *     * ROLE_QUEUE_ADMIN */
    put: operations['purgeQueue']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/opt-out': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Opts an offender out of being assessed for early release.
     * @description Opts an offender out of being assessed for early release.
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    put: operations['optOut']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description
     *
     *     Requires one of the following roles:
     *     * ROLE_QUEUE_ADMIN */
    get: operations['getDlqMessages']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prison/{prisonCode}/case-admin/caseload': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the caseload for a case admin within a prison
     * @description Returns a list of offenders that require eligibility and suitability checks to be performed
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getCaseAdminCaseload']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the current assessment for a prisoner
     * @description Returns details of the current assessment for a prisoner
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getCurrentAssessment']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offender/{prisonNumber}/current-assessment/initial-checks': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the initial checks for a prisoner's current assessment
     * @description Returns details of the current state of a prisoner's initial checks
     *
     *     Requires one of the following roles:
     *     * ASSESS_FOR_EARLY_RELEASE_ADMIN
     */
    get: operations['getInitialChecks']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    /** @description Request for opting an offender out of assess for early release */
    OptOutRequest: {
      /**
       * @description The reason the offender is opting out
       * @example DOES_NOT_WANT_TO_BE_TAGGED
       * @enum {string}
       */
      reasonType: 'NOWHERE_TO_STAY' | 'DOES_NOT_WANT_TO_BE_TAGGED' | 'NO_REASON_GIVEN' | 'OTHER'
      /**
       * @description The reason the offender is opting out if reasonType is other
       * @example Reason for the offending opting out
       */
      otherDescription?: string
    }
    /** @description Response object which describes an offender */
    OffenderSummary: {
      /**
       * @description The offender's prisoner number
       * @example A1234AA
       */
      prisonNumber: string
      /**
       * Format: int64
       * @description The offender's booking id
       * @example 773722
       */
      bookingId: number
      /**
       * @description The offender's first name
       * @example Bob
       */
      forename?: string
      /**
       * @description The offender's surname
       * @example Smith
       */
      surname?: string
      /**
       * Format: date
       * @description The offender's home detention curfew eligibility date
       */
      hdced: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    DlqMessage: {
      body: {
        [key: string]: Record<string, never>
      }
      messageId: string
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    /** @description Response object which describes an assessment */
    AssessmentSummary: {
      /**
       * @description The offender's first name
       * @example Bob
       */
      forename?: string
      /**
       * @description The offender's surname
       * @example Smith
       */
      surname?: string
      /**
       * Format: date
       * @description The offender's date of birth
       */
      dateOfBirth: string
      /**
       * @description The offender's prison number
       * @example A1234AA
       */
      prisonNumber: string
      /**
       * Format: date
       * @description The offender's home detention curfew eligibility date
       */
      hdced: string
      /**
       * Format: date
       * @description The offender's conditional release date
       */
      crd?: string
      /**
       * @description The name of the prison the offender is in
       * @example Foston Hall (HMP)
       */
      location: string
      /**
       * @description The assessment status
       * @example NOT_STARTED
       * @enum {string}
       */
      status: 'NOT_STARTED' | 'OPTED_OUT'
      /**
       * @description The version of the policy that this assessment has been carried out under
       * @example 1.0
       */
      policyVersion: string
    }
    /** @description The initial checks for a specific assessment */
    EligibilityCheckDetails: {
      /**
       * @description the unique code to identify this check
       * @example rotl-failure-to-return
       */
      code: string
      /**
       * @description The name of the check that would appear in a task list
       * @example ROTL failure to return
       */
      taskName: string
      /**
       * @description The question that is posed to the user
       * @example a question...
       */
      question: string
      /**
       * @description The state of this check
       * @example NOT_STARTED
       * @enum {string}
       */
      state: 'ELIGIBLE' | 'INELIGIBLE' | 'NOT_STARTED' | 'IN_PROGRESS'
      /**
       * @description The answer provided by the user
       * @example Yes
       */
      answer?: Record<string, never>
    }
    /** @description The initial checks for a specific assessment:
     *       * eligibility status: any ineligible: ELIGIBLE, INELIGIBLE, IN_PROGRESS, NOT_STARTED
     *       * suitability status: any unsuitable: SUITABLE, UNSUITABLE, IN_PROGRESS, NOT_STARTED
     *       * complete: all eligibility checks ELIGIBLE, or any eligibility check INELIGIBLE
     *       * overall: eligibility status = ELIGIBLE and suitability status = SUITABLE
     *      */
    InitialChecks: {
      assessmentSummary: components['schemas']['AssessmentSummary']
      /** @description all eligibility checks ELIGIBLE, or any eligibility check INELIGIBLE */
      complete: boolean
      /** @description eligibility status = ELIGIBLE and suitability status = SUITABLE */
      checksPassed: boolean
      /**
       * @description state of current eligibility checks
       * @enum {string}
       */
      eligibilityStatus: 'ELIGIBLE' | 'INELIGIBLE' | 'NOT_STARTED' | 'IN_PROGRESS'
      /** @description details of current eligibility checks */
      eligibility: components['schemas']['EligibilityCheckDetails'][]
      /**
       * @description state of current suitability checks
       * @enum {string}
       */
      suitabilityStatus: 'SUITABLE' | 'UNSUITABLE' | 'NOT_STARTED' | 'IN_PROGRESS'
      /** @description details of current suitability checks */
      suitability: components['schemas']['SuitabilityCheckDetails'][]
    }
    /** @description The initial checks for a specific assessment */
    SuitabilityCheckDetails: {
      /**
       * @description the unique code to identify this check
       * @example rosh-and-mappa
       */
      code: string
      /**
       * @description The name of the check that would appear in a task list
       * @example RoSH and MAPPA
       */
      taskName: string
      /**
       * @description The question that is posed to the user
       * @example a question...
       */
      question: string
      /**
       * @description The state of this check
       * @example NOT_STARTED
       * @enum {string}
       */
      state: 'ELIGIBLE' | 'INELIGIBLE' | 'NOT_STARTED' | 'IN_PROGRESS'
      /**
       * @description The answer provided by the user
       * @example Yes
       */
      answer?: Record<string, never>
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  retryDlq: {
    parameters: {
      query?: never
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
    }
  }
  retryAllDlqs: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      query?: never
      header?: never
      path: {
        queueName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
    }
  }
  optOut: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OptOutRequest']
      }
    }
    responses: {
      /** @description The offender has been opted out of assess for early release. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderSummary'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
    }
  }
  getCaseAdminCaseload: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a list of offenders that require eligibility and suitability checks to be performed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderSummary'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCurrentAssessment: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns the current assessment for the prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AssessmentSummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getInitialChecks: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns the current assessment for the prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InitialChecks']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
